import { NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import dbConnect from '../../../../lib/db'
import User from '../../../../models/User'
import Assignment from '../../../../models/Assignment'
import { generateUniversityAssignmentPDF } from '../../../../lib/pdfGenerator'

export async function GET(request, { params }) {
  try {
    const session = await getServerSession()
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    await dbConnect()
    
    const user = await User.findOne({ email: session.user.email })
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    const assignment = await Assignment.findOne({ 
      _id: params.id, 
      userId: user._id 
    })

    if (!assignment) {
      return NextResponse.json({ error: 'Assignment not found' }, { status: 404 })
    }

    if (assignment.status !== 'completed') {
      return NextResponse.json({ error: 'Assignment not ready for download' }, { status: 400 })
    }

    // Generate file content based on format
    let fileContent = ''
    let fileName = `${assignment.title}.${assignment.fileFormat}`
    let contentType = ''

    switch (assignment.fileFormat) {
      case 'txt':
        fileContent = generateTextContent(assignment)
        contentType = 'text/plain'
        break
      
      case 'pdf':
        fileContent = generatePDFContent(assignment, user)
        contentType = 'application/pdf'
        break
      
      case 'docx':
        fileContent = generateDOCXContent(assignment)
        contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        break
      
      default:
        return NextResponse.json({ error: 'Unsupported file format' }, { status: 400 })
    }

    // Create response with file
    const response = new NextResponse(fileContent)
    response.headers.set('Content-Type', contentType)
    response.headers.set('Content-Disposition', `attachment; filename="${fileName}"`)
    
    return response

  } catch (error) {
    console.error('Download error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

function generateTextContent(assignment) {
  return `Assignment: ${assignment.title}
Subject: ${assignment.subject}
Date: ${new Date(assignment.createdAt).toLocaleDateString()}

${assignment.aiResponse}

---
Generated by AssignmentAI
This content is for educational purposes only.
Please review and cite sources appropriately.
`
}

function generatePDFContent(assignment, user) {
  try {
    // Use stored student information or fallback to user data
    const studentInfo = {
      name: assignment.studentInfo?.name || user.name || user.email || 'Student Name',
      id: assignment.studentInfo?.id || user.studentId || 'Student ID',
      course: assignment.studentInfo?.course || assignment.subject,
      instructor: assignment.studentInfo?.instructor || 'Course Instructor',
      university: assignment.studentInfo?.university || 'University Name'
    }
    
    // Generate university format PDF
    const doc = generateUniversityAssignmentPDF(
      assignment.aiResponse,
      assignment.subject,
      assignment.title,
      studentInfo
    )
    
    // Convert to buffer
    const pdfBuffer = doc.output('arraybuffer')
    return Buffer.from(pdfBuffer)
    
  } catch (error) {
    console.error('PDF generation error:', error)
    // Fallback to basic text content
    const content = generateTextContent(assignment)
    return Buffer.from(content, 'utf-8')
  }
}

function generateDOCXContent(assignment) {
  // For simplicity, we'll return a basic DOCX structure
  // In production, you'd use a library like docx
  const content = generateTextContent(assignment)
  
  // Basic DOCX structure (simplified)
  const docxContent = `PK
${content}
PK`
  
  return docxContent
} 